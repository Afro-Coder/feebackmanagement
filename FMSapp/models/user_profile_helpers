def generate_reset_token(self, expiration=3600):
   s = Serializer(current_app.config['SECRET_KEY'], expiration)
   return s.dumps({'reset': self.id}).decode('utf-8')

@staticmethod
def reset_password(token, new_password):
    s = Serializer(current_app.config['SECRET_KEY'])
    try:
        data = s.loads(token.encode('utf-8'))
    except:
        return False
    user = User.query.get(data.get('reset'))
    if user is None:
        return False
    user.password = new_password
    db.session.add(user)
    return True

def generate_email_change_token(self, new_email, expiration=3600):
    s = Serializer(current_app.config['SECRET_KEY'], expiration)
    return s.dumps(
        {'change_email': self.id, 'new_email': new_email}).decode('utf-8')

def change_email(self, token):
    s = Serializer(current_app.config['SECRET_KEY'])
    try:
        data = s.loads(token.encode('utf-8'))
    except:
        return False
    if data.get('change_email') != self.id:
        return False
    new_email = data.get('new_email')
    if new_email is None:
        return False
    if self.query.filter_by(email=new_email).first() is not None:
        return False
    self.email = new_email
    db.session.add(self)
    return True
